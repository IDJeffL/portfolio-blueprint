#!/usr/bin/env node
import Configstore from 'configstore';
import { spawn } from 'child_process';
import dotenv from 'dotenv-flow';
import { marshallTelemetryData, getCliArgs, validateFaustEnvVars, promptUserForTelemetryPref, sendTelemetryData, requestWPTelemetryData, generatePossibleTypes, } from './utils/index.js';
const CONFIG_STORE_NAME = 'faust';
const config = new Configstore(CONFIG_STORE_NAME);
// eslint-disable-next-line func-names, @typescript-eslint/no-floating-promises
(async function () {
    var _a, _b, _c, _d, _e;
    const arg1 = getCliArgs()[0];
    switch (arg1) {
        case 'build':
            process.env.NODE_ENV = 'production';
            break;
        case 'start':
            process.env.NODE_ENV = 'production';
            break;
        case 'test':
            process.env.NODE_ENV = 'test';
            break;
        case 'dev':
        default:
            process.env.NODE_ENV = 'development';
            break;
    }
    dotenv.config();
    validateFaustEnvVars();
    /**
     * If there is no config (or a non-valid config), prompt the user for their
     * permission to collect anonymous telemetry information and save their
     * preferences on their machine.
     */
    if (!((_a = config.all) === null || _a === void 0 ? void 0 : _a.telemetry) ||
        ((_c = (_b = config.all) === null || _b === void 0 ? void 0 : _b.telemetry) === null || _c === void 0 ? void 0 : _c.enabled) === undefined ||
        !((_e = (_d = config.all) === null || _d === void 0 ? void 0 : _d.telemetry) === null || _e === void 0 ? void 0 : _e.anonymousId)) {
        /**
         * Do not prompt for telemetry if preferences are not set and the command
         * that is being ran is build or start. We do not want to halt the build of a
         * production site that likely does not have preferences saved.
         */
        if (arg1 !== 'build' && arg1 !== 'start') {
            await promptUserForTelemetryPref(true, config);
        }
    }
    // eslint-disable-next-line default-case
    switch (arg1) {
        case 'faust-telemetry': {
            await promptUserForTelemetryPref(false, config);
            process.exit(0);
            break;
        }
        case 'generatePossibleTypes': {
            await generatePossibleTypes();
            process.exit(0);
            break;
        }
    }
    const shouldFireTelemetryEvent = (arg1 === 'dev' || arg1 === 'build') &&
        config.get('telemetry.enabled') === true &&
        config.get('telemetry.anonymousId') &&
        process.env.FAUSTWP_SECRET_KEY;
    if (shouldFireTelemetryEvent) {
        try {
            const wpTelemetryData = await requestWPTelemetryData(
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            process.env.NEXT_PUBLIC_WORDPRESS_URL, 
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            process.env.FAUSTWP_SECRET_KEY);
            const telemetryData = marshallTelemetryData(wpTelemetryData, arg1);
            // infoLog('Telemetry event being sent', telemetryData);
            void sendTelemetryData(telemetryData, config.get('telemetry.anonymousId'));
        }
        catch (err) {
            // console.log(err);
            // Fail silently
        }
    }
    /**
     * Spawn a child process using the args captured in argv and continue the
     * standard i/o for the Next.js CLI.
     */
    spawn('next', getCliArgs(), { stdio: 'inherit' });
})();
